package main

import (
	"bytes"
	"context"
	"log"
	"net/http"
	"os"
	"os/signal"
	"sync"
	"syscall"
	"time"

	flags "github.com/jessevdk/go-flags"
	"github.com/pkg/errors"
)

var bufferPool = sync.Pool{
	New: allocateBuffer,
}

func allocateBuffer() interface{} {
	return &bytes.Buffer{}
}

func getBuffer() *bytes.Buffer {
	return bufferPool.Get().(*bytes.Buffer)
}

func releaseBuffer(buf *bytes.Buffer) {
	buf.Reset()
	bufferPool.Put(buf)
}

type options struct {
	Addr string `short:"a" long:"address" default:":8080" description:"address to listen to"`
}

func main() {
	if err := _main(); err != nil {
		log.Printf("error: %v", err)
		os.Exit(1)
	}
	os.Exit(0)
}

func _main() error {
	var opts options
	if _, err := flags.Parse(&opts); err != nil {
		return errors.Wrap(err, "parsing flags")
	}

	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	srv := http.Server{
		Addr:    opts.Addr,
		Handler: NewRouter(),
	}

	sigCh := make(chan os.Signal, 1)
	signal.Notify(sigCh, syscall.SIGINT, syscall.SIGTERM, syscall.SIGQUIT)
	go func(ctx context.Context) {
		for {
			select {
			case <-ctx.Done():
				return
			case <-sigCh:
				ctx, cancel := context.WithTimeout(ctx, 1*time.Minute)
				defer cancel()
				if err := srv.Shutdown(ctx); err != nil {
					log.Print(err)
				}
				return
			}
		}
	}(ctx)

	if err := srv.ListenAndServe(); err != nil {
		return err
	}
	return nil
}
