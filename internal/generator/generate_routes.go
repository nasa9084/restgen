package generator

import (
	"bytes"
	"errors"
	"sort"

	gen "github.com/nasa9084/go-genutils"
	openapi "github.com/nasa9084/go-openapi"
	"golang.org/x/tools/imports"
)

var httpMethods = []string{"GET", "HEAD", "POST", "PUT", "PATCH", "DELETE", "CONNECT", "OPTIONS", "TRACE"}

func GenerateRoutes(spec *openapi.Document) ([]byte, error) {
	var buf bytes.Buffer
	buf.WriteString("package main")
	// TODO: import by tools/imports
	buf.WriteString(gen.Imports{gen.Import{ImportPath: "net/http"}, gen.Import{ImportPath: "github.com/gorilla/mux"}}.String())
	buf.WriteString("\n// code generated by genserver. DO NOT EDIT.")
	buf.WriteString("\n\nfunc NewRouter() http.Handler {")
	buf.WriteString("\nr := mux.NewRouter()")
	var paths []string
	for path := range spec.Paths {
		paths = append(paths, path)
	}
	sort.Strings(paths)
	for _, path := range paths {
		pathItem := spec.Paths[path]
		for _, method := range httpMethods {
			op := pathItem.GetOperationByMethod(method)
			if op == nil {
				continue
			}
			if op.OperationID == "" {
				return nil, errors.New("operationId is required: " + path)
			}
			buf.WriteString("\nr.HandleFunc(\"")
			buf.WriteString(path)
			buf.WriteString(`", `)
			buf.WriteString(op.OperationID)
			buf.WriteString(`Handler).Methods("`)
			buf.WriteString(method)
			buf.WriteString(`")`)
		}
	}
	buf.WriteString("\nreturn r")
	buf.WriteString("\n}")
	src, err := imports.Process("", buf.Bytes(), &imports.Options{Comments: true, Fragment: true, FormatOnly: true})
	if err != nil {
		return nil, err
	}
	return src, nil
}
