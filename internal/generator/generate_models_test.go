package generator_test

import (
	"testing"

	openapi "github.com/nasa9084/go-openapi"
	"github.com/nasa9084/restgen/internal/generator"
)

func TestGenerateSchemaTypes(t *testing.T) {
	spec := `---
components:
  schemas:
    Foo:
      type: object
      properties:
        bar:
          type: string
`
	doc, err := openapi.Load([]byte(spec))
	if err != nil {
		t.Fatal(err)
	}
	typ, err := generator.GenerateSchemaTypes(doc)
	if err != nil {
		t.Error(err)
		return
	}
	expected := `package models

// code generated by genserver. DO NOT EDIT.

type Foo struct {
	bar string
}
`
	if string(typ) != expected {
		t.Errorf("%s != %s", string(typ), expected)
		return
	}
}

func TestGenerateSchemaTypesWithTimeTime(t *testing.T) {
	spec := `---
components:
  schemas:
    Foo:
      type: object
      properties:
        bar:
          type: string
          format: date-time
`
	doc, err := openapi.Load([]byte(spec))
	if err != nil {
		t.Fatal(err)
	}
	typ, err := generator.GenerateSchemaTypes(doc)
	if err != nil {
		t.Error(err)
		return
	}
	expected := `package models

import "time"

// code generated by genserver. DO NOT EDIT.

type Foo struct {
	bar time.Time
}
`
	if string(typ) != expected {
		t.Errorf("%s != %s", string(typ), expected)
		return
	}
}

func TestGenerateResponseTypes(t *testing.T) {
	spec := `---
components:
  responses:
    FooResponse:
      description: bar
      content:
        application/json:
          schema:
            type: object
            properties:
              Baz:
                type: string
`
	doc, err := openapi.Load([]byte(spec))
	if err != nil {
		t.Fatal(err)
	}
	typ, err := generator.GenerateResponseTypes(doc)
	if err != nil {
		t.Error(err)
		return
	}
	expected := `package models

// code generated by genserver. DO NOT EDIT.

// bar
type FooResponse struct {
	Baz string
}
`
	if string(typ) != expected {
		t.Errorf("%s != %s", string(typ), expected)
		return
	}
}

func TestGenerateResponseTypesWithTimeTime(t *testing.T) {
	spec := `---
components:
  responses:
    FooResponse:
      description: bar
      content:
        application/json:
          schema:
            type: object
            properties:
              Baz:
                type: string
                format: date-time
`
	doc, err := openapi.Load([]byte(spec))
	if err != nil {
		t.Fatal(err)
	}
	typ, err := generator.GenerateResponseTypes(doc)
	if err != nil {
		t.Error(err)
		return
	}
	expected := `package models

import "time"

// code generated by genserver. DO NOT EDIT.

// bar
type FooResponse struct {
	Baz time.Time
}
`
	if string(typ) != expected {
		t.Errorf("%s != %s", string(typ), expected)
		return
	}
}

func TestGenerateRequestTypes(t *testing.T) {
	spec := `---
components:
  requestBodies:
    FooRequest:
      description: bar
      content:
        application/json:
          schema:
            type: object
            properties:
              Baz:
                type: string
`
	doc, err := openapi.Load([]byte(spec))
	if err != nil {
		t.Fatal(err)
	}
	typ, err := generator.GenerateRequestTypes(doc)
	if err != nil {
		t.Error(err)
		return
	}
	expected := `package models

// code generated by genserver. DO NOT EDIT.

// bar
type FooRequest struct {
	Baz string
}
`
	if string(typ) != expected {
		t.Errorf("%s != %s", string(typ), expected)
		return
	}
}

func TestGenerateRequestTypesWithTimeTime(t *testing.T) {
	spec := `---
components:
  requestBodies:
    FooRequest:
      description: bar
      content:
        application/json:
          schema:
            type: object
            properties:
              Baz:
                type: string
                format: date-time
`
	doc, err := openapi.Load([]byte(spec))
	if err != nil {
		t.Fatal(err)
	}
	typ, err := generator.GenerateRequestTypes(doc)
	if err != nil {
		t.Error(err)
		return
	}
	expected := `package models

import "time"

// code generated by genserver. DO NOT EDIT.

// bar
type FooRequest struct {
	Baz time.Time
}
`
	if string(typ) != expected {
		t.Errorf("%s != %s", string(typ), expected)
		return
	}
}
