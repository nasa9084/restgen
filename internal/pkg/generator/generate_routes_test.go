package generator_test

import (
	"testing"

	openapi "github.com/nasa9084/go-openapi"
	"github.com/nasa9084/restgen/internal/pkg/generator"
)

func TestGenerateHandlers(t *testing.T) {
	spec := `---
paths:
  /:
    get:
      description: foo
      operationId: Foo
      responses:
        '200':
          $ref: "#/components/responses/FooResponse"
`
	doc, err := openapi.Load([]byte(spec))
	if err != nil {
		t.Fatal(err)
	}
	src, err := generator.GenerateHandlers(doc)
	if err != nil {
		t.Error(err)
		return
	}
	expected := `package main

import (
	"encoding/json"
	"net/http"
)

// code generated by genserver. DO NOT EDIT.

func NewRouter() http.Handler {
	r := http.NewServeMux()
	r.HandleFunc("/", FooHandler)
	return r
}

func errorStatus(err error) int {
	return http.StatusInternalServerError
}

func FooHandler(w http.ResponseWriter, r *http.Request) {
	hdr, res, err := Foo(r)
	if err != nil {
		w.WriteHeader(errorStatus(err))
		return
	}
	buf := getBuffer()
	defer releaseBuffer(buf)
	if err := json.NewEncoder(buf).Encode(res); err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		return
	}
	if _, err := buf.WriteTo(w); err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		return
	}
	for k, vs := range hdr {
		for _, v := range vs {
			w.Header().Add(k, v)
		}
	}
	w.WriteHeader(200)
}
`
	if string(src) != expected {
		t.Errorf("%s != %s", string(src), expected)
		return
	}
}
