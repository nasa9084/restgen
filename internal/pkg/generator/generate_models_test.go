package generator_test

import (
	"testing"

	openapi "github.com/nasa9084/go-openapi"
	"github.com/nasa9084/restgen/internal/pkg/generator"
)

func TestGenerateSchemaTypes(t *testing.T) {
	spec := `---
components:
  schemas:
    Foo:
      type: object
      properties:
        bar:
          type: string
`
	doc, err := openapi.Load([]byte(spec))
	if err != nil {
		t.Fatal(err)
	}
	typ, err := generator.GenerateSchemaTypes(doc)
	if err != nil {
		t.Error(err)
		return
	}
	expected := `package models

// code generated by restgen. DO NOT EDIT.

type Foo struct {
	bar string
}
`
	if string(typ) != expected {
		t.Errorf("%s != %s", string(typ), expected)
		return
	}
}

func TestGenerateSchemaTypesWithTimeTime(t *testing.T) {
	spec := `---
components:
  schemas:
    Foo:
      type: object
      properties:
        bar:
          type: string
          format: date-time
`
	doc, err := openapi.Load([]byte(spec))
	if err != nil {
		t.Fatal(err)
	}
	typ, err := generator.GenerateSchemaTypes(doc)
	if err != nil {
		t.Error(err)
		return
	}
	expected := `package models

import "time"

// code generated by restgen. DO NOT EDIT.

type Foo struct {
	bar time.Time
}
`
	if string(typ) != expected {
		t.Errorf("%s != %s", string(typ), expected)
		return
	}
}

func TestGenerateResponseTypes(t *testing.T) {
	spec := `---
components:
  responses:
    FooResponse:
      description: bar
      content:
        application/json:
          schema:
            type: object
            properties:
              Baz:
                type: string
`
	doc, err := openapi.Load([]byte(spec))
	if err != nil {
		t.Fatal(err)
	}
	typ, err := generator.GenerateResponseTypes(doc)
	if err != nil {
		t.Error(err)
		return
	}
	expected := `package models

// code generated by restgen. DO NOT EDIT.

// bar
type FooResponse struct {
	Baz string
}
`
	if string(typ) != expected {
		t.Errorf("%s != %s", string(typ), expected)
		return
	}
}

func TestGenerateResponseTypesWithTimeTime(t *testing.T) {
	spec := `---
components:
  responses:
    FooResponse:
      description: bar
      content:
        application/json:
          schema:
            type: object
            properties:
              Baz:
                type: string
                format: date-time
`
	doc, err := openapi.Load([]byte(spec))
	if err != nil {
		t.Fatal(err)
	}
	typ, err := generator.GenerateResponseTypes(doc)
	if err != nil {
		t.Error(err)
		return
	}
	expected := `package models

import "time"

// code generated by restgen. DO NOT EDIT.

// bar
type FooResponse struct {
	Baz time.Time
}
`
	if string(typ) != expected {
		t.Errorf("%s != %s", string(typ), expected)
		return
	}
}

func TestGenerateRequestTypes(t *testing.T) {
	spec := `---
paths:
  /:
    get:
      operationId: Hoge
      parameters:
        - name: Foo
          in: header
          schema:
            type: string
        - name: Bar
          in: path
          required: true
          schema:
            type: string
        - name: Baz
          in: query
          schema:
            type: string
        - name: Qux
          in: cookie
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                FooBar:
                  type: string
`
	doc, err := openapi.Load([]byte(spec))
	if err != nil {
		t.Fatal(err)
	}
	typ, err := generator.GenerateRequestTypes(doc)
	if err != nil {
		t.Error(err)
		return
	}
	expected := `package models

// code generated by restgen. DO NOT EDIT.

type HogeRequest struct {
	Query struct {
		Baz string
	}
	Header struct {
		Foo string
	}
	PathArgs struct {
		Bar string
	}
	Cookie struct {
		Qux string
	}
	Body struct {
		FooBar string
	}
}
`
	if string(typ) != expected {
		t.Errorf("%s != %s", string(typ), expected)
		return
	}
}

func TestGenerateRequestTypesWithTimeTime(t *testing.T) {
	spec := `---
paths:
  /:
    get:
      operationId: Hoge
      parameters:
        - name: Foo
          in: header
          schema:
            type: string
            format: date-time
        - name: Bar
          in: path
          required: true
          schema:
            type: string
        - name: Baz
          in: query
          schema:
            type: string
        - name: Qux
          in: cookie
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                FooBar:
                  type: string
`
	doc, err := openapi.Load([]byte(spec))
	if err != nil {
		t.Fatal(err)
	}
	typ, err := generator.GenerateRequestTypes(doc)
	if err != nil {
		t.Error(err)
		return
	}
	expected := `package models

import "time"

// code generated by restgen. DO NOT EDIT.

type HogeRequest struct {
	Query struct {
		Baz string
	}
	Header struct {
		Foo time.Time
	}
	PathArgs struct {
		Bar string
	}
	Cookie struct {
		Qux string
	}
	Body struct {
		FooBar string
	}
}
`
	if string(typ) != expected {
		t.Errorf("%s != %s", string(typ), expected)
		return
	}
}

func TestGenerateRequestBodyTypes(t *testing.T) {
	spec := `---
components:
  requestBodies:
    FooRequest:
      description: bar
      content:
        application/json:
          schema:
            type: object
            properties:
              Baz:
                type: string
`
	doc, err := openapi.Load([]byte(spec))
	if err != nil {
		t.Fatal(err)
	}
	typ, err := generator.GenerateRequestBodyTypes(doc)
	if err != nil {
		t.Error(err)
		return
	}
	expected := `package models

// code generated by restgen. DO NOT EDIT.

// bar
type FooRequestBody struct {
	Baz string
}
`
	if string(typ) != expected {
		t.Errorf("%s != %s", string(typ), expected)
		return
	}
}

func TestGenerateRequestBodyTypesWithTimeTime(t *testing.T) {
	spec := `---
components:
  requestBodies:
    FooRequest:
      description: bar
      content:
        application/json:
          schema:
            type: object
            properties:
              Baz:
                type: string
                format: date-time
`
	doc, err := openapi.Load([]byte(spec))
	if err != nil {
		t.Fatal(err)
	}
	typ, err := generator.GenerateRequestBodyTypes(doc)
	if err != nil {
		t.Error(err)
		return
	}
	expected := `package models

import "time"

// code generated by restgen. DO NOT EDIT.

// bar
type FooRequestBody struct {
	Baz time.Time
}
`
	if string(typ) != expected {
		t.Errorf("%s != %s", string(typ), expected)
		return
	}
}
